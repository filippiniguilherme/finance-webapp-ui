import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import moment from 'moment';
import { useAppDispatch as oi } from '../hooks/hooks';
import { RootState, AppThunk } from '../reducers/store';
import { api } from '../services/api';

export interface AuthorState {
    value: [
        Author
    ]
    status: 'idle' | 'loading' | 'failed';
}

export interface Author {
    authorId: number,
    authorName: string
}

const initialState: AuthorState = {
    value: [
        {
            authorId: 0,
            authorName: ''
        }
    ],
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const handleAuthor = createAsyncThunk(
    'author',
    async () => {
        const response = await api
            .get(`/author/list`);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);


export const authorSlice = createSlice({
    name: 'author',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(handleAuthor.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(handleAuthor.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            })
            .addCase(handleAuthor.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

// export const { increment, decrement, incrementByAmount } = balanceSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.balance.value)`
export const selectAuthor = (state: RootState) => state.author.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//         (dispatch, getState) => {
//             const currentValue = selectCount(getState());
//             if (currentValue % 2 === 1) {
//                 dispatch(incrementByAmount(amount));
//             }
//         };

export default authorSlice.reducer;
